{"version":3,"sources":["Action.ts","model/PermissionAction.ts","Permission.ts","model/SMSSource.ts","lib/SMSResult.ts","SMSReader.ts","reader.ts"],"names":[],"mappings":"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","file":"reader.js","sourceRoot":"../ts","sourcesContent":["import SMSSource from \"./model/SMSSource\";\nimport PermissionAction from \"./model/PermissionAction\";\nimport SMSResult from \"./lib/SMSResult\";\nimport SMS from \"./model/SMS\";\n\nexport default abstract class Action {\n    protected abstract action: string;\n\n    protected exec(data: SMSSource | PermissionAction): Promise<SMS[] | void> {\n        return new Promise<void>((resolve, reject) => {\n            cordova.exec(resolve, reject, \"AndroidSMSReader\", this.action, [data]);\n            // this.exec(resolve, reject, PermissionAction.REQUEST)\n        });\n    }\n}\n","enum PermissionAction {\n    REQUEST = \"REQUEST\",\n    CHECK = \"CHECK\"\n}\nexport default PermissionAction;\n","import Action from \"./Action\";\nimport PermissionAction from \"./model/PermissionAction\";\n\nexport default class Permission extends Action {\n\n    protected action: string = \"permission\";\n\n\n    protected exec(data: PermissionAction): Promise<void> {\n        return super.exec(data) as Promise<void>;\n    }\n\n    async requestPermission(): Promise<void> {\n       return this.exec(PermissionAction.REQUEST);\n    }\n\n    async assertPermission(): Promise<void> {\n        return this.exec(PermissionAction.CHECK)\n    }\n\n}\n","enum SMSSource {\n    ALL = \"\",\n    INBOX = \"inbox\",\n    SENT = \"sent\"\n}\nexport default SMSSource;\n","import SMS from \"../model/SMS\";\n\nexport default class SMSResult {\n\n    constructor(\n        private allSMS: SMS[],\n        private callbackFilters: ((sms: SMS) => boolean)[] = []\n    ) {\n    }\n\n    /**\n     * Filter the SMS of an @link{SMSResult} that meet the condition specified in a callbackFn function.\n     * @param callbackFn A function that take sms. The filter method calls the callbackFn function one time for each sms in the current SMSResult and return new SMSResult\n     * @return new SMSResult\n     */\n    public filter(callbackFn: (sms: SMS) => boolean): SMSResult {\n        return new SMSResult(this.allSMS, this.callbackFilters.concat(callbackFn));\n    }\n\n    /**\n     * Filter SMS checking phone numbers\n     * @param phoneNumbers\n     */\n    public withPhoneNumbers(...phoneNumbers: string[]): SMSResult {\n        return this.filter((sms) => {\n            return phoneNumbers.indexOf(sms.address) >= 0;\n        });\n    }\n\n    /**\n     *\n     * @param search\n     * @param isCaseSensitive\n     */\n    public bodiesInclude(search: string, isCaseSensitive: boolean = false): SMSResult {\n        if (isCaseSensitive) {\n            return this.filter(sms => sms.body.includes(search));\n        }\n        const searchLowerCase = search.toLowerCase();\n        return this.filter(sms => sms.body.toLowerCase().includes(searchLowerCase));\n    }\n\n    /**\n     * Filter SMS\n     * @param since\n     */\n    public since(since: string | number | Date) {\n        const d: Date = new Date(since);\n        return this.filter((sms) => {\n            return new Date(sms.date).getTime() >= d.getTime();\n        });\n    }\n\n    /**\n     * Filter only the read sms\n     * @return SMSResult\n     */\n    public read(): SMSResult {\n        return this.filter(sms => sms.read);\n    }\n\n    /**\n     * Get all sms\n     */\n    public get all(): SMS[] {\n        return this.allSMS.filter((sms) => {\n            let result: boolean = true;\n            for (let i: number = 0; i < this.callbackFilters.length && result; i++) {\n                result = this.callbackFilters[i](sms);\n            }\n            return result;\n        });\n    }\n}\n","import Action from \"./Action\";\nimport SMS from \"./model/SMS\";\nimport SMSSource from \"./model/SMSSource\";\nimport SMSResult from \"./lib/SMSResult\";\n\nexport default class SMSReader extends Action {\n    protected action: string = \"read\";\n\n    public async read(from: SMSSource = SMSSource.ALL): Promise<SMSResult>{\n        return new SMSResult(await super.exec(from) as unknown as SMS[]);\n    }\n}\n","import Permission from \"./Permission\";\nimport SMSReader from \"./SMSReader\";\n\nexport const permission: Permission = new Permission();\nexport const smsreader: SMSReader = new SMSReader();\n\nexport default {\n    permission,\n    smsreader\n}\n"]}